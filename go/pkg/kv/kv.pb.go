// Code generated by protoc-gen-go. DO NOT EDIT.
// source: kv.proto

package kv

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The GET message containing the key's name.
type GetKey struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetKey) Reset()         { *m = GetKey{} }
func (m *GetKey) String() string { return proto.CompactTextString(m) }
func (*GetKey) ProtoMessage()    {}
func (*GetKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_2216fe83c9c12408, []int{0}
}

func (m *GetKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetKey.Unmarshal(m, b)
}
func (m *GetKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetKey.Marshal(b, m, deterministic)
}
func (m *GetKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetKey.Merge(m, src)
}
func (m *GetKey) XXX_Size() int {
	return xxx_messageInfo_GetKey.Size(m)
}
func (m *GetKey) XXX_DiscardUnknown() {
	xxx_messageInfo_GetKey.DiscardUnknown(m)
}

var xxx_messageInfo_GetKey proto.InternalMessageInfo

func (m *GetKey) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

// The response message containing the key's value.
type GetReply struct {
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// True if key was defined, otherwise false.
	Defined              bool     `protobuf:"varint,2,opt,name=defined,proto3" json:"defined,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetReply) Reset()         { *m = GetReply{} }
func (m *GetReply) String() string { return proto.CompactTextString(m) }
func (*GetReply) ProtoMessage()    {}
func (*GetReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_2216fe83c9c12408, []int{1}
}

func (m *GetReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetReply.Unmarshal(m, b)
}
func (m *GetReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetReply.Marshal(b, m, deterministic)
}
func (m *GetReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReply.Merge(m, src)
}
func (m *GetReply) XXX_Size() int {
	return xxx_messageInfo_GetReply.Size(m)
}
func (m *GetReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetReply proto.InternalMessageInfo

func (m *GetReply) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *GetReply) GetDefined() bool {
	if m != nil {
		return m.Defined
	}
	return false
}

// The SET message containing the key's name and value.
type SetKey struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Broadcast            bool     `protobuf:"varint,3,opt,name=broadcast,proto3" json:"broadcast,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetKey) Reset()         { *m = SetKey{} }
func (m *SetKey) String() string { return proto.CompactTextString(m) }
func (*SetKey) ProtoMessage()    {}
func (*SetKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_2216fe83c9c12408, []int{2}
}

func (m *SetKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetKey.Unmarshal(m, b)
}
func (m *SetKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetKey.Marshal(b, m, deterministic)
}
func (m *SetKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetKey.Merge(m, src)
}
func (m *SetKey) XXX_Size() int {
	return xxx_messageInfo_SetKey.Size(m)
}
func (m *SetKey) XXX_DiscardUnknown() {
	xxx_messageInfo_SetKey.DiscardUnknown(m)
}

var xxx_messageInfo_SetKey proto.InternalMessageInfo

func (m *SetKey) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SetKey) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *SetKey) GetBroadcast() bool {
	if m != nil {
		return m.Broadcast
	}
	return false
}

// The response message containing the key's value.
type SetReply struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetReply) Reset()         { *m = SetReply{} }
func (m *SetReply) String() string { return proto.CompactTextString(m) }
func (*SetReply) ProtoMessage()    {}
func (*SetReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_2216fe83c9c12408, []int{3}
}

func (m *SetReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetReply.Unmarshal(m, b)
}
func (m *SetReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetReply.Marshal(b, m, deterministic)
}
func (m *SetReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetReply.Merge(m, src)
}
func (m *SetReply) XXX_Size() int {
	return xxx_messageInfo_SetReply.Size(m)
}
func (m *SetReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SetReply.DiscardUnknown(m)
}

var xxx_messageInfo_SetReply proto.InternalMessageInfo

func (m *SetReply) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// The LIST message.
type Void struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Void) Reset()         { *m = Void{} }
func (m *Void) String() string { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()    {}
func (*Void) Descriptor() ([]byte, []int) {
	return fileDescriptor_2216fe83c9c12408, []int{4}
}

func (m *Void) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Void.Unmarshal(m, b)
}
func (m *Void) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Void.Marshal(b, m, deterministic)
}
func (m *Void) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Void.Merge(m, src)
}
func (m *Void) XXX_Size() int {
	return xxx_messageInfo_Void.Size(m)
}
func (m *Void) XXX_DiscardUnknown() {
	xxx_messageInfo_Void.DiscardUnknown(m)
}

var xxx_messageInfo_Void proto.InternalMessageInfo

// The peer registration message containing the IP address of the new peer.
type IP struct {
	Ip                   string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IP) Reset()         { *m = IP{} }
func (m *IP) String() string { return proto.CompactTextString(m) }
func (*IP) ProtoMessage()    {}
func (*IP) Descriptor() ([]byte, []int) {
	return fileDescriptor_2216fe83c9c12408, []int{5}
}

func (m *IP) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IP.Unmarshal(m, b)
}
func (m *IP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IP.Marshal(b, m, deterministic)
}
func (m *IP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IP.Merge(m, src)
}
func (m *IP) XXX_Size() int {
	return xxx_messageInfo_IP.Size(m)
}
func (m *IP) XXX_DiscardUnknown() {
	xxx_messageInfo_IP.DiscardUnknown(m)
}

var xxx_messageInfo_IP proto.InternalMessageInfo

func (m *IP) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

// The response message containing the key-value store.
type StoreReply struct {
	Store                map[string]string `protobuf:"bytes,1,rep,name=store,proto3" json:"store,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *StoreReply) Reset()         { *m = StoreReply{} }
func (m *StoreReply) String() string { return proto.CompactTextString(m) }
func (*StoreReply) ProtoMessage()    {}
func (*StoreReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_2216fe83c9c12408, []int{6}
}

func (m *StoreReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StoreReply.Unmarshal(m, b)
}
func (m *StoreReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StoreReply.Marshal(b, m, deterministic)
}
func (m *StoreReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreReply.Merge(m, src)
}
func (m *StoreReply) XXX_Size() int {
	return xxx_messageInfo_StoreReply.Size(m)
}
func (m *StoreReply) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreReply.DiscardUnknown(m)
}

var xxx_messageInfo_StoreReply proto.InternalMessageInfo

func (m *StoreReply) GetStore() map[string]string {
	if m != nil {
		return m.Store
	}
	return nil
}

func init() {
	proto.RegisterType((*GetKey)(nil), "kv.GetKey")
	proto.RegisterType((*GetReply)(nil), "kv.GetReply")
	proto.RegisterType((*SetKey)(nil), "kv.SetKey")
	proto.RegisterType((*SetReply)(nil), "kv.SetReply")
	proto.RegisterType((*Void)(nil), "kv.Void")
	proto.RegisterType((*IP)(nil), "kv.IP")
	proto.RegisterType((*StoreReply)(nil), "kv.StoreReply")
	proto.RegisterMapType((map[string]string)(nil), "kv.StoreReply.StoreEntry")
}

func init() { proto.RegisterFile("kv.proto", fileDescriptor_2216fe83c9c12408) }

var fileDescriptor_2216fe83c9c12408 = []byte{
	// 307 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x41, 0x4b, 0xfb, 0x40,
	0x10, 0xc5, 0xbb, 0x9b, 0x76, 0xff, 0xe9, 0xfc, 0xa5, 0x94, 0xa5, 0x87, 0x18, 0x3c, 0xc4, 0x3d,
	0xf5, 0x20, 0x15, 0xea, 0xa5, 0xf4, 0x2a, 0x52, 0x8a, 0x22, 0x25, 0x0b, 0x7a, 0x4e, 0xcd, 0xa8,
	0x4b, 0x42, 0x12, 0x36, 0x6b, 0x24, 0xdf, 0xc6, 0x8f, 0x2a, 0x9b, 0xa4, 0xa4, 0x22, 0x8a, 0xb7,
	0x79, 0x6f, 0x7e, 0x79, 0x33, 0x13, 0x16, 0xdc, 0xa4, 0x5a, 0x14, 0x3a, 0x37, 0x39, 0xa7, 0x49,
	0x25, 0x7c, 0x60, 0x1b, 0x34, 0xb7, 0x58, 0xf3, 0x29, 0x38, 0x09, 0xd6, 0x1e, 0x09, 0xc8, 0x7c,
	0x1c, 0xda, 0x52, 0xac, 0xc1, 0xdd, 0xa0, 0x09, 0xb1, 0x48, 0x6b, 0x3e, 0x83, 0x51, 0x15, 0xa5,
	0x6f, 0xd8, 0xf5, 0x5b, 0xc1, 0x3d, 0xf8, 0x17, 0xe3, 0xb3, 0xca, 0x30, 0xf6, 0x68, 0x40, 0xe6,
	0x6e, 0x78, 0x90, 0xe2, 0x1e, 0x98, 0xfc, 0x21, 0xb7, 0xcf, 0xa2, 0xc7, 0x59, 0x67, 0x30, 0xde,
	0xeb, 0x3c, 0x8a, 0x9f, 0xa2, 0xd2, 0x78, 0x4e, 0x93, 0xd6, 0x1b, 0x22, 0x00, 0x57, 0xfe, 0xba,
	0x8b, 0x60, 0x30, 0x7c, 0xc8, 0x55, 0x2c, 0x66, 0x40, 0xb7, 0x3b, 0x3e, 0x01, 0xaa, 0x8a, 0x0e,
	0xa0, 0xaa, 0x10, 0xef, 0x00, 0xd2, 0xe4, 0x1a, 0xdb, 0x84, 0x4b, 0x18, 0x95, 0x56, 0x79, 0x24,
	0x70, 0xe6, 0xff, 0x97, 0xa7, 0x8b, 0xa4, 0x5a, 0xf4, 0xed, 0xb6, 0xbc, 0xc9, 0x8c, 0xae, 0xc3,
	0x96, 0xf3, 0x57, 0xdd, 0xe7, 0x8d, 0xf9, 0xd7, 0x93, 0xd6, 0x74, 0x45, 0x96, 0x1f, 0x04, 0xd8,
	0x75, 0xaa, 0x30, 0x33, 0xfc, 0x1c, 0x9c, 0x0d, 0x1a, 0x0e, 0x76, 0x5a, 0xfb, 0xd3, 0xfd, 0x93,
	0xae, 0x6e, 0xe6, 0x8a, 0x81, 0x45, 0xe4, 0x01, 0x91, 0x47, 0x88, 0xec, 0x11, 0x01, 0xc3, 0x3b,
	0x55, 0x1a, 0xee, 0x5a, 0xdf, 0x5e, 0xec, 0x4f, 0xbe, 0xae, 0x2f, 0x06, 0xfc, 0x02, 0xa6, 0x21,
	0xbe, 0xa8, 0xd2, 0xa0, 0x7e, 0x54, 0xe6, 0x75, 0x87, 0xa8, 0x39, 0xb3, 0xd4, 0x76, 0xf7, 0x9d,
	0xde, 0xb3, 0xe6, 0x39, 0x5c, 0x7d, 0x06, 0x00, 0x00, 0xff, 0xff, 0x76, 0x80, 0xcc, 0xd3, 0x1a,
	0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClientClient is the client API for Client service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClientClient interface {
	// Retrieves a key from a server.
	Get(ctx context.Context, in *GetKey, opts ...grpc.CallOption) (*GetReply, error)
	// Set a key on a server.
	Set(ctx context.Context, in *SetKey, opts ...grpc.CallOption) (*SetReply, error)
	// List all the keys defined on a server.
	List(ctx context.Context, in *Void, opts ...grpc.CallOption) (*StoreReply, error)
	// Registers a new server with a peer.
	RegisterWithPeer(ctx context.Context, in *IP, opts ...grpc.CallOption) (*StoreReply, error)
}

type clientClient struct {
	cc *grpc.ClientConn
}

func NewClientClient(cc *grpc.ClientConn) ClientClient {
	return &clientClient{cc}
}

func (c *clientClient) Get(ctx context.Context, in *GetKey, opts ...grpc.CallOption) (*GetReply, error) {
	out := new(GetReply)
	err := c.cc.Invoke(ctx, "/kv.Client/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientClient) Set(ctx context.Context, in *SetKey, opts ...grpc.CallOption) (*SetReply, error) {
	out := new(SetReply)
	err := c.cc.Invoke(ctx, "/kv.Client/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientClient) List(ctx context.Context, in *Void, opts ...grpc.CallOption) (*StoreReply, error) {
	out := new(StoreReply)
	err := c.cc.Invoke(ctx, "/kv.Client/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientClient) RegisterWithPeer(ctx context.Context, in *IP, opts ...grpc.CallOption) (*StoreReply, error) {
	out := new(StoreReply)
	err := c.cc.Invoke(ctx, "/kv.Client/RegisterWithPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientServer is the server API for Client service.
type ClientServer interface {
	// Retrieves a key from a server.
	Get(context.Context, *GetKey) (*GetReply, error)
	// Set a key on a server.
	Set(context.Context, *SetKey) (*SetReply, error)
	// List all the keys defined on a server.
	List(context.Context, *Void) (*StoreReply, error)
	// Registers a new server with a peer.
	RegisterWithPeer(context.Context, *IP) (*StoreReply, error)
}

func RegisterClientServer(s *grpc.Server, srv ClientServer) {
	s.RegisterService(&_Client_serviceDesc, srv)
}

func _Client_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kv.Client/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).Get(ctx, req.(*GetKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kv.Client/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).Set(ctx, req.(*SetKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kv.Client/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).List(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_RegisterWithPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).RegisterWithPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kv.Client/RegisterWithPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).RegisterWithPeer(ctx, req.(*IP))
	}
	return interceptor(ctx, in, info, handler)
}

var _Client_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kv.Client",
	HandlerType: (*ClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Client_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _Client_Set_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Client_List_Handler,
		},
		{
			MethodName: "RegisterWithPeer",
			Handler:    _Client_RegisterWithPeer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kv.proto",
}
